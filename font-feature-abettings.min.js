(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
 * Font Feature Abettings v0.0.1
 * Reluctantly polyfills OpenType font-feature-settings in Safari, et al.
 * http://kennethormandy.com
 * Copyright © 2014 Kenneth Ormandy. Available under the MIT License.
 */

var far      = require('./vendor/findAndReplaceDOMText')
  , data     = require('./test/data')
  ;

window.fontFeatureAbettings = (function(el) {

  var iterate
    , addClass
    ;

  /**
   * Flatten gsub, wizardry by @sintaxi
   */
  iterate = function(node, prefix) {
    var arr = [];

    // Nothing to do
    if (Object.prototype.toString.call(node) !== '[object Object]') {
      return prefix || [];
    }

    // Inception
    for (var key in node) {
      arr.push(iterate(data.gnames[node[key]], (prefix || '') + data.gnames[key]));
    }

    // Flatten
    return [].concat.apply([], arr);
  };

  /**
   * Adds a class to any element
   *
   * @param  {element} el
   * @param  {string}  className
   */
  addClass = function(e, className) {
    if (e.classList) {
      return e.classList.add(className);
    } else {
      return e.className += ' ' + className;
    }
  };

  var item
    , feat
    , ptrns
    , patterns = ''
    , permitted = ['liga', 'dlig']
    ;

  for(feat in data.gsub) {
    if(permitted.indexOf(feat) !== -1) {
      for(item in data.gsub[feat]) {
        // It seems like this should all be part of @sintaxi’s thing, too
        if(data.gsub[feat].hasOwnProperty(item)) {
          if(Object.prototype.toString.call(data.gsub[feat][item]) === '[object Object]') {
            patterns += ',' + (iterate(data.gsub[feat][item], '' + data.gnames[item]));
          }
          // else {
          //   // If it’s not an object, it’s a single character substitution
          //   return patterns += ',' + iterate(data.gsub[feat]).join());
          // }
        }
      }
    }
  }

  ptrns = patterns.split(',');
  ptrns.shift();

  // ffk is hard-coded as an example of where
  // the RegExp could work better Longest phrase
  // to shortest, array flattening would need to
  // take this into account, too
  var regArr = '(ffk)|(' + ptrns.join(')|(') + ')';
  var reg = new RegExp(regArr, 'g');

  findAndReplaceDOMText(el, {
    find: reg,
    wrap: 'mark',
    replace: function(portion, match) {
      var e = document.createElement('mark');
      e.setAttribute('data-content', portion.text);
      e.setAttribute('data-feat', feat);
      e.setAttribute('data-highlighted', true);
      addClass(e, 'mark');
      addClass(e, 'mark--' + feat);
      e.innerHTML = portion.text;
      return e;
    }
  });

});

},{"./test/data":2,"./vendor/findAndReplaceDOMText":3}],2:[function(require,module,exports){
module.exports={
    "font-family": "Klinic Slab",
    "font-style": "normal",
    "font-weight": 400,
    "feat": [
        "aalt",
        "c2sc",
        "case",
        "dlig",
        "liga",
        "lnum",
        "salt",
        "smcp",
        "ss01"
    ],
    "gsub": {
        "aalt": {
            "9": [
                463,
                560
            ],
            "11": [
                462
            ],
            "19": [
                566
            ],
            "20": [
                567
            ],
            "21": [
                535
            ],
            "22": [
                536
            ],
            "23": [
                537
            ],
            "24": [
                538
            ],
            "25": [
                539
            ],
            "26": [
                540
            ],
            "27": [
                541
            ],
            "34": [
                542
            ],
            "35": [
                543
            ],
            "36": [
                544
            ],
            "37": [
                464
            ],
            "38": [
                573
            ],
            "39": [
                466
            ],
            "40": [
                467
            ],
            "41": [
                468
            ],
            "42": [
                469
            ],
            "43": [
                470
            ],
            "44": [
                471
            ],
            "45": [
                472
            ],
            "46": [
                473
            ],
            "47": [
                474
            ],
            "48": [
                475
            ],
            "49": [
                476
            ],
            "50": [
                477
            ],
            "51": [
                478
            ],
            "52": [
                479
            ],
            "53": [
                480
            ],
            "54": [
                481
            ],
            "55": [
                482
            ],
            "56": [
                483
            ],
            "57": [
                484
            ],
            "58": [
                485
            ],
            "59": [
                486
            ],
            "60": [
                487
            ],
            "61": [
                488
            ],
            "68": [
                466,
                545
            ],
            "69": [
                489
            ],
            "70": [
                490
            ],
            "71": [
                491
            ],
            "72": [
                570
            ],
            "74": [
                472,
                555
            ],
            "76": [
                474,
                428
            ],
            "77": [
                571
            ],
            "78": [
                465
            ],
            "79": [
                467
            ],
            "80": [
                468
            ],
            "81": [
                469
            ],
            "82": [
                470
            ],
            "83": [
                471
            ],
            "84": [
                473
            ],
            "85": [
                475
            ],
            "86": [
                476
            ],
            "87": [
                477
            ],
            "88": [
                478
            ],
            "89": [
                479
            ],
            "90": [
                480
            ],
            "91": [
                481
            ],
            "92": [
                482
            ],
            "93": [
                483
            ],
            "94": [
                484
            ],
            "95": [
                485
            ],
            "128": [
                486
            ],
            "129": [
                487
            ],
            "130": [
                488
            ],
            "131": [
                489
            ],
            "132": [
                490
            ],
            "133": [
                491
            ],
            "134": [
                568
            ],
            "135": [
                572
            ],
            "136": [
                569
            ],
            "137": [
                492
            ],
            "138": [
                493
            ],
            "139": [
                494
            ],
            "140": [
                495
            ],
            "141": [
                496
            ],
            "142": [
                497
            ],
            "143": [
                498
            ],
            "144": [
                499
            ],
            "145": [
                500
            ],
            "146": [
                501
            ],
            "147": [
                502
            ],
            "148": [
                503
            ],
            "149": [
                504
            ],
            "150": [
                505
            ],
            "153": [
                506
            ],
            "154": [
                507
            ],
            "155": [
                508
            ],
            "156": [
                509
            ],
            "157": [
                510
            ],
            "158": [
                511
            ],
            "161": [
                498,
                546
            ],
            "162": [
                499,
                547
            ],
            "163": [
                500,
                548
            ],
            "164": [
                501,
                549
            ],
            "165": [
                502,
                550
            ],
            "166": [
                503,
                551
            ],
            "167": [
                512
            ],
            "168": [
                513
            ],
            "169": [
                514
            ],
            "170": [
                515
            ],
            "171": [
                516
            ],
            "172": [
                517
            ],
            "173": [
                518
            ],
            "174": [
                519
            ],
            "175": [
                520
            ],
            "176": [
                521
            ],
            "177": [
                522
            ],
            "178": [
                523
            ],
            "179": [
                524
            ],
            "180": [
                525
            ],
            "181": [
                526
            ],
            "182": [
                527
            ],
            "185": [
                504
            ],
            "186": [
                505
            ],
            "187": [
                506
            ],
            "188": [
                507
            ],
            "189": [
                508
            ],
            "190": [
                509
            ],
            "191": [
                510
            ],
            "192": [
                511
            ],
            "194": [
                370,
                552
            ],
            "196": [
                369,
                553
            ],
            "198": [
                371,
                554
            ],
            "199": [
                512
            ],
            "200": [
                513
            ],
            "201": [
                514
            ],
            "202": [
                515
            ],
            "203": [
                516
            ],
            "204": [
                517
            ],
            "205": [
                518
            ],
            "206": [
                519
            ],
            "207": [
                520
            ],
            "208": [
                521
            ],
            "209": [
                522
            ],
            "210": [
                523
            ],
            "211": [
                524
            ],
            "212": [
                525
            ],
            "213": [
                526
            ],
            "214": [
                527
            ],
            "215": [
                528
            ],
            "216": [
                370
            ],
            "217": [
                369
            ],
            "218": [
                371
            ],
            "219": [
                373
            ],
            "220": [
                373
            ],
            "222": [
                386,
                556
            ],
            "224": [
                385,
                557
            ],
            "226": [
                388,
                558
            ],
            "228": [
                387,
                559
            ],
            "229": [
                375
            ],
            "230": [
                375
            ],
            "231": [
                376
            ],
            "232": [
                376
            ],
            "233": [
                374
            ],
            "234": [
                374
            ],
            "235": [
                377
            ],
            "236": [
                377
            ],
            "237": [
                378
            ],
            "238": [
                378
            ],
            "239": [
                382
            ],
            "240": [
                382
            ],
            "241": [
                379
            ],
            "242": [
                379
            ],
            "243": [
                381
            ],
            "244": [
                381
            ],
            "245": [
                384
            ],
            "248": [
                384
            ],
            "249": [
                380
            ],
            "250": [
                380
            ],
            "251": [
                386
            ],
            "252": [
                385
            ],
            "253": [
                388
            ],
            "254": [
                387
            ],
            "255": [
                390
            ],
            "256": [
                390
            ],
            "257": [
                389
            ],
            "258": [
                389
            ],
            "259": [
                394
            ],
            "260": [
                394
            ],
            "261": [
                392
            ],
            "262": [
                392
            ],
            "265": [
                391
            ],
            "266": [
                391
            ],
            "267": [
                393
            ],
            "268": [
                393
            ],
            "269": [
                428
            ],
            "270": [
                474
            ],
            "271": [
                395
            ],
            "272": [
                395
            ],
            "273": [
                396
            ],
            "274": [
                396
            ],
            "275": [
                397
            ],
            "276": [
                397
            ],
            "277": [
                399
            ],
            "278": [
                399
            ],
            "279": [
                398
            ],
            "280": [
                398
            ],
            "281": [
                400
            ],
            "282": [
                400
            ],
            "283": [
                456
            ],
            "284": [
                456
            ],
            "285": [
                401
            ],
            "286": [
                401
            ],
            "287": [
                403
            ],
            "288": [
                403
            ],
            "289": [
                402
            ],
            "290": [
                402
            ],
            "291": [
                383
            ],
            "292": [
                383
            ],
            "293": [
                406
            ],
            "294": [
                406
            ],
            "295": [
                404
            ],
            "296": [
                404
            ],
            "297": [
                405
            ],
            "298": [
                405
            ],
            "299": [
                360
            ],
            "300": [
                360
            ],
            "301": [
                408
            ],
            "302": [
                408
            ],
            "303": [
                410
            ],
            "304": [
                410
            ],
            "305": [
                409
            ],
            "306": [
                409
            ],
            "307": [
                411
            ],
            "308": [
                411
            ],
            "309": [
                413
            ],
            "310": [
                413
            ],
            "311": [
                412
            ],
            "312": [
                412
            ],
            "313": [
                459
            ],
            "314": [
                459
            ],
            "315": [
                417
            ],
            "316": [
                417
            ],
            "319": [
                416
            ],
            "320": [
                416
            ],
            "321": [
                415
            ],
            "322": [
                415
            ],
            "323": [
                423
            ],
            "324": [
                423
            ],
            "325": [
                420
            ],
            "328": [
                420
            ],
            "329": [
                418
            ],
            "330": [
                418
            ],
            "331": [
                422
            ],
            "332": [
                422
            ],
            "333": [
                419
            ],
            "334": [
                419
            ]
        },
        "c2sc": {
            "4": [
                462
            ],
            "9": [
                463
            ],
            "11": [
                566
            ],
            "12": [
                567
            ],
            "34": [
                464
            ],
            "35": [
                573
            ],
            "36": [
                466
            ],
            "37": [
                467
            ],
            "38": [
                468
            ],
            "39": [
                469
            ],
            "40": [
                470
            ],
            "41": [
                471
            ],
            "42": [
                472
            ],
            "43": [
                473
            ],
            "44": [
                474
            ],
            "45": [
                475
            ],
            "46": [
                476
            ],
            "47": [
                477
            ],
            "48": [
                478
            ],
            "49": [
                479
            ],
            "50": [
                480
            ],
            "51": [
                481
            ],
            "52": [
                482
            ],
            "53": [
                483
            ],
            "54": [
                484
            ],
            "55": [
                485
            ],
            "56": [
                486
            ],
            "57": [
                487
            ],
            "58": [
                488
            ],
            "59": [
                489
            ],
            "60": [
                490
            ],
            "61": [
                491
            ],
            "62": [
                570
            ],
            "64": [
                571
            ],
            "67": [
                465
            ],
            "94": [
                568
            ],
            "95": [
                572
            ],
            "96": [
                569
            ],
            "98": [
                492
            ],
            "105": [
                493
            ],
            "112": [
                494
            ],
            "117": [
                495
            ],
            "121": [
                496
            ],
            "128": [
                497
            ],
            "129": [
                498
            ],
            "130": [
                499
            ],
            "131": [
                500
            ],
            "132": [
                501
            ],
            "133": [
                502
            ],
            "134": [
                503
            ],
            "135": [
                504
            ],
            "136": [
                505
            ],
            "137": [
                506
            ],
            "138": [
                507
            ],
            "139": [
                508
            ],
            "140": [
                509
            ],
            "141": [
                510
            ],
            "142": [
                511
            ],
            "143": [
                512
            ],
            "144": [
                513
            ],
            "145": [
                514
            ],
            "146": [
                515
            ],
            "147": [
                516
            ],
            "148": [
                517
            ],
            "149": [
                518
            ],
            "150": [
                519
            ],
            "151": [
                520
            ],
            "153": [
                521
            ],
            "154": [
                522
            ],
            "155": [
                523
            ],
            "156": [
                524
            ],
            "157": [
                525
            ],
            "158": [
                526
            ],
            "159": [
                527
            ],
            "193": [
                370
            ],
            "195": [
                369
            ],
            "197": [
                371
            ],
            "199": [
                373
            ],
            "201": [
                375
            ],
            "203": [
                376
            ],
            "205": [
                374
            ],
            "207": [
                377
            ],
            "209": [
                378
            ],
            "211": [
                382
            ],
            "213": [
                379
            ],
            "215": [
                381
            ],
            "217": [
                384
            ],
            "219": [
                380
            ],
            "221": [
                386
            ],
            "223": [
                385
            ],
            "225": [
                388
            ],
            "227": [
                387
            ],
            "229": [
                390
            ],
            "231": [
                389
            ],
            "233": [
                394
            ],
            "235": [
                392
            ],
            "237": [
                391
            ],
            "239": [
                393
            ],
            "241": [
                428
            ],
            "243": [
                395
            ],
            "245": [
                396
            ],
            "248": [
                397
            ],
            "250": [
                399
            ],
            "252": [
                398
            ],
            "254": [
                400
            ],
            "256": [
                456
            ],
            "258": [
                401
            ],
            "260": [
                403
            ],
            "262": [
                402
            ],
            "265": [
                383
            ],
            "267": [
                406
            ],
            "269": [
                404
            ],
            "271": [
                405
            ],
            "273": [
                360
            ],
            "275": [
                408
            ],
            "277": [
                410
            ],
            "279": [
                409
            ],
            "281": [
                411
            ],
            "283": [
                413
            ],
            "285": [
                412
            ],
            "287": [
                459
            ],
            "289": [
                417
            ],
            "291": [
                416
            ],
            "293": [
                415
            ],
            "295": [
                423
            ],
            "297": [
                420
            ],
            "299": [
                418
            ],
            "301": [
                422
            ],
            "303": [
                419
            ],
            "305": [
                421
            ],
            "307": [
                424
            ],
            "309": [
                425
            ],
            "311": [
                528
            ],
            "312": [
                426
            ],
            "314": [
                427
            ],
            "316": [
                461
            ],
            "319": [
                372
            ],
            "321": [
                407
            ],
            "323": [
                414
            ],
            "325": [
                575
            ],
            "328": [
                453
            ],
            "329": [
                452
            ],
            "330": [
                451
            ],
            "331": [
                454
            ],
            "332": [
                458
            ],
            "333": [
                457
            ],
            "334": [
                460
            ],
            "335": [
                455
            ],
            "560": [
                574
            ]
        },
        "case": {
            "11": [
                429
            ],
            "12": [
                430
            ],
            "16": [
                441
            ],
            "18": [
                561
            ],
            "35": [
                368
            ],
            "62": [
                431
            ],
            "63": [
                562
            ],
            "64": [
                432
            ],
            "94": [
                433
            ],
            "95": [
                563
            ],
            "96": [
                434
            ],
            "98": [
                435
            ],
            "103": [
                564
            ],
            "108": [
                437
            ],
            "120": [
                444
            ],
            "124": [
                438
            ],
            "128": [
                436
            ],
            "336": [
                442
            ],
            "337": [
                443
            ],
            "346": [
                565
            ],
            "349": [
                439
            ],
            "350": [
                440
            ]
        },
        "dlig": {
            "55": {
                "75": 576
            },
            "70": {
                "87": 577
            },
            "86": {
                "87": 534
            }
        },
        "liga": {
            "73": {
                "69": 583,
                "73": 529,
                "75": 584,
                "76": 530,
                "77": 585,
                "78": 586,
                "79": 531,
                "87": 587
            },
            "87": {
                "87": 588
            }
        },
        "lnum": {
            "19": [
                535
            ],
            "20": [
                536
            ],
            "21": [
                537
            ],
            "22": [
                538
            ],
            "23": [
                539
            ],
            "24": [
                540
            ],
            "25": [
                541
            ],
            "26": [
                542
            ],
            "27": [
                543
            ]
        },
        "salt": {
            "68": [
                545
            ],
            "74": [
                555
            ],
            "161": [
                546
            ],
            "162": [
                547
            ],
            "163": [
                548
            ],
            "164": [
                549
            ],
            "165": [
                550
            ],
            "166": [
                551
            ],
            "194": [
                552
            ],
            "196": [
                553
            ],
            "198": [
                554
            ],
            "222": [
                556
            ],
            "224": [
                557
            ],
            "226": [
                558
            ],
            "228": [
                559
            ]
        },
        "smcp": {
            "68": [
                466
            ],
            "69": [
                467
            ],
            "70": [
                468
            ],
            "71": [
                469
            ],
            "72": [
                470
            ],
            "73": [
                471
            ],
            "74": [
                472
            ],
            "75": [
                473
            ],
            "76": [
                474
            ],
            "77": [
                475
            ],
            "78": [
                476
            ],
            "79": [
                477
            ],
            "80": [
                478
            ],
            "81": [
                479
            ],
            "82": [
                480
            ],
            "83": [
                481
            ],
            "84": [
                482
            ],
            "85": [
                483
            ],
            "86": [
                484
            ],
            "87": [
                485
            ],
            "88": [
                486
            ],
            "89": [
                487
            ],
            "90": [
                488
            ],
            "91": [
                489
            ],
            "92": [
                490
            ],
            "93": [
                491
            ],
            "161": [
                498
            ],
            "162": [
                499
            ],
            "163": [
                500
            ],
            "164": [
                501
            ],
            "165": [
                502
            ],
            "166": [
                503
            ],
            "167": [
                504
            ],
            "168": [
                505
            ],
            "169": [
                506
            ],
            "170": [
                507
            ],
            "171": [
                508
            ],
            "172": [
                509
            ],
            "173": [
                510
            ],
            "174": [
                511
            ],
            "175": [
                512
            ],
            "176": [
                513
            ],
            "177": [
                514
            ],
            "178": [
                515
            ],
            "179": [
                516
            ],
            "180": [
                517
            ],
            "181": [
                518
            ],
            "182": [
                519
            ],
            "183": [
                520
            ],
            "185": [
                521
            ],
            "186": [
                522
            ],
            "187": [
                523
            ],
            "188": [
                524
            ],
            "189": [
                525
            ],
            "190": [
                526
            ],
            "191": [
                527
            ],
            "192": [
                528
            ],
            "194": [
                370
            ],
            "196": [
                369
            ],
            "198": [
                371
            ],
            "200": [
                373
            ],
            "202": [
                375
            ],
            "204": [
                376
            ],
            "206": [
                374
            ],
            "208": [
                377
            ],
            "210": [
                378
            ],
            "212": [
                382
            ],
            "214": [
                379
            ],
            "216": [
                381
            ],
            "218": [
                384
            ],
            "220": [
                380
            ],
            "222": [
                386
            ],
            "224": [
                385
            ],
            "226": [
                388
            ],
            "228": [
                387
            ],
            "230": [
                390
            ],
            "232": [
                389
            ],
            "234": [
                394
            ],
            "236": [
                392
            ],
            "238": [
                391
            ],
            "240": [
                393
            ],
            "242": [
                474
            ],
            "244": [
                395
            ],
            "246": [
                396
            ],
            "249": [
                397
            ],
            "251": [
                399
            ],
            "253": [
                398
            ],
            "255": [
                400
            ],
            "257": [
                456
            ],
            "259": [
                401
            ],
            "261": [
                403
            ],
            "263": [
                402
            ],
            "266": [
                383
            ],
            "268": [
                406
            ],
            "270": [
                404
            ],
            "272": [
                405
            ],
            "274": [
                360
            ],
            "276": [
                408
            ],
            "278": [
                410
            ],
            "280": [
                409
            ],
            "282": [
                411
            ],
            "284": [
                413
            ],
            "286": [
                412
            ],
            "288": [
                459
            ],
            "290": [
                417
            ],
            "292": [
                416
            ],
            "294": [
                415
            ],
            "296": [
                423
            ],
            "298": [
                420
            ],
            "300": [
                418
            ],
            "302": [
                422
            ],
            "304": [
                419
            ],
            "306": [
                421
            ],
            "308": [
                424
            ],
            "310": [
                425
            ],
            "313": [
                426
            ],
            "315": [
                427
            ],
            "317": [
                461
            ],
            "320": [
                372
            ],
            "322": [
                407
            ],
            "324": [
                414
            ],
            "326": [
                575
            ]
        },
        "ss01": {
            "9": [
                560
            ]
        }
    },
    "gnames": {
        "0": ".notdef",
        "1": ".null",
        "2": "nonmarkingreturn",
        "3": "space",
        "4": "exclam",
        "5": "quotedbl",
        "6": "numbersign",
        "7": "dollar",
        "8": "percent",
        "9": "ampersand",
        "10": "quotesingle",
        "11": "parenleft",
        "12": "parenright",
        "13": "asterisk",
        "14": "plus",
        "15": "comma",
        "16": "hyphen",
        "17": "period",
        "18": "slash",
        "19": "zero",
        "20": "one",
        "21": "two",
        "22": "three",
        "23": "four",
        "24": "five",
        "25": "six",
        "26": "seven",
        "27": "eight",
        "28": "nine",
        "29": "colon",
        "30": "semicolon",
        "31": "less",
        "32": "equal",
        "33": "greater",
        "34": "question",
        "35": "at",
        "36": "A",
        "37": "B",
        "38": "C",
        "39": "D",
        "40": "E",
        "41": "F",
        "42": "G",
        "43": "H",
        "44": "I",
        "45": "J",
        "46": "K",
        "47": "L",
        "48": "M",
        "49": "N",
        "50": "O",
        "51": "P",
        "52": "Q",
        "53": "R",
        "54": "S",
        "55": "T",
        "56": "U",
        "57": "V",
        "58": "W",
        "59": "X",
        "60": "Y",
        "61": "Z",
        "62": "bracketleft",
        "63": "backslash",
        "64": "bracketright",
        "65": "asciicircum",
        "66": "underscore",
        "67": "grave",
        "68": "a",
        "69": "b",
        "70": "c",
        "71": "d",
        "72": "e",
        "73": "f",
        "74": "g",
        "75": "h",
        "76": "i",
        "77": "j",
        "78": "k",
        "79": "l",
        "80": "m",
        "81": "n",
        "82": "o",
        "83": "p",
        "84": "q",
        "85": "r",
        "86": "s",
        "87": "t",
        "88": "u",
        "89": "v",
        "90": "w",
        "91": "x",
        "92": "y",
        "93": "z",
        "94": "braceleft",
        "95": "bar",
        "96": "braceright",
        "97": "asciitilde",
        "98": "exclamdown",
        "99": "cent",
        "100": "sterling",
        "101": "currency",
        "102": "yen",
        "103": "brokenbar",
        "104": "section",
        "105": "dieresis",
        "106": "copyright",
        "107": "ordfeminine",
        "108": "guillemotleft",
        "109": "logicalnot",
        "110": "uni00AD",
        "111": "registered",
        "112": "macron",
        "113": "degree",
        "114": "plusminus",
        "115": "twosuperior",
        "116": "threesuperior",
        "117": "acute",
        "118": "mu",
        "119": "paragraph",
        "120": "periodcentered",
        "121": "cedilla",
        "122": "onesuperior",
        "123": "ordmasculine",
        "124": "guillemotright",
        "125": "onequarter",
        "126": "onehalf",
        "127": "threequarters",
        "128": "questiondown",
        "129": "Agrave",
        "130": "Aacute",
        "131": "Acircumflex",
        "132": "Atilde",
        "133": "Adieresis",
        "134": "Aring",
        "135": "AE",
        "136": "Ccedilla",
        "137": "Egrave",
        "138": "Eacute",
        "139": "Ecircumflex",
        "140": "Edieresis",
        "141": "Igrave",
        "142": "Iacute",
        "143": "Icircumflex",
        "144": "Idieresis",
        "145": "Eth",
        "146": "Ntilde",
        "147": "Ograve",
        "148": "Oacute",
        "149": "Ocircumflex",
        "150": "Otilde",
        "151": "Odieresis",
        "152": "multiply",
        "153": "Oslash",
        "154": "Ugrave",
        "155": "Uacute",
        "156": "Ucircumflex",
        "157": "Udieresis",
        "158": "Yacute",
        "159": "Thorn",
        "160": "germandbls",
        "161": "agrave",
        "162": "aacute",
        "163": "acircumflex",
        "164": "atilde",
        "165": "adieresis",
        "166": "aring",
        "167": "ae",
        "168": "ccedilla",
        "169": "egrave",
        "170": "eacute",
        "171": "ecircumflex",
        "172": "edieresis",
        "173": "igrave",
        "174": "iacute",
        "175": "icircumflex",
        "176": "idieresis",
        "177": "eth",
        "178": "ntilde",
        "179": "ograve",
        "180": "oacute",
        "181": "ocircumflex",
        "182": "otilde",
        "183": "odieresis",
        "184": "divide",
        "185": "oslash",
        "186": "ugrave",
        "187": "uacute",
        "188": "ucircumflex",
        "189": "udieresis",
        "190": "yacute",
        "191": "thorn",
        "192": "ydieresis",
        "193": "Amacron",
        "194": "amacron",
        "195": "Abreve",
        "196": "abreve",
        "197": "Aogonek",
        "198": "aogonek",
        "199": "Cacute",
        "200": "cacute",
        "201": "Ccircumflex",
        "202": "ccircumflex",
        "203": "Cdotaccent",
        "204": "cdotaccent",
        "205": "Ccaron",
        "206": "ccaron",
        "207": "Dcaron",
        "208": "dcaron",
        "209": "Dcroat",
        "210": "dcroat",
        "211": "Emacron",
        "212": "emacron",
        "213": "Ebreve",
        "214": "ebreve",
        "215": "Edotaccent",
        "216": "edotaccent",
        "217": "Eogonek",
        "218": "eogonek",
        "219": "Ecaron",
        "220": "ecaron",
        "221": "Gcircumflex",
        "222": "gcircumflex",
        "223": "Gbreve",
        "224": "gbreve",
        "225": "Gdotaccent",
        "226": "gdotaccent",
        "227": "Gcommaaccent",
        "228": "gcommaaccent",
        "229": "Hcircumflex",
        "230": "hcircumflex",
        "231": "Hbar",
        "232": "hbar",
        "233": "Itilde",
        "234": "itilde",
        "235": "Imacron",
        "236": "imacron",
        "237": "Ibreve",
        "238": "ibreve",
        "239": "Iogonek",
        "240": "iogonek",
        "241": "Idotaccent",
        "242": "dotlessi",
        "243": "Jcircumflex",
        "244": "jcircumflex",
        "245": "Kcommaaccent",
        "246": "kcommaaccent",
        "247": "kgreenlandic",
        "248": "Lacute",
        "249": "lacute",
        "250": "Lcommaaccent",
        "251": "lcommaaccent",
        "252": "Lcaron",
        "253": "lcaron",
        "254": "Ldot",
        "255": "ldot",
        "256": "Lslash",
        "257": "lslash",
        "258": "Nacute",
        "259": "nacute",
        "260": "Ncommaaccent",
        "261": "ncommaaccent",
        "262": "Ncaron",
        "263": "ncaron",
        "264": "napostrophe",
        "265": "Eng",
        "266": "eng",
        "267": "Omacron",
        "268": "omacron",
        "269": "Obreve",
        "270": "obreve",
        "271": "Ohungarumlaut",
        "272": "ohungarumlaut",
        "273": "OE",
        "274": "oe",
        "275": "Racute",
        "276": "racute",
        "277": "Rcommaaccent",
        "278": "rcommaaccent",
        "279": "Rcaron",
        "280": "rcaron",
        "281": "Sacute",
        "282": "sacute",
        "283": "Scircumflex",
        "284": "scircumflex",
        "285": "Scedilla",
        "286": "scedilla",
        "287": "Scaron",
        "288": "scaron",
        "289": "Tcommaaccent",
        "290": "tcommaaccent",
        "291": "Tcaron",
        "292": "tcaron",
        "293": "Tbar",
        "294": "tbar",
        "295": "Utilde",
        "296": "utilde",
        "297": "Umacron",
        "298": "umacron",
        "299": "Ubreve",
        "300": "ubreve",
        "301": "Uring",
        "302": "uring",
        "303": "Uhungarumlaut",
        "304": "uhungarumlaut",
        "305": "Uogonek",
        "306": "uogonek",
        "307": "Wcircumflex",
        "308": "wcircumflex",
        "309": "Ycircumflex",
        "310": "ycircumflex",
        "311": "Ydieresis",
        "312": "Zacute",
        "313": "zacute",
        "314": "Zdotaccent",
        "315": "zdotaccent",
        "316": "Zcaron",
        "317": "zcaron",
        "318": "longs",
        "319": "AEacute",
        "320": "aeacute",
        "321": "Oslashacute",
        "322": "oslashacute",
        "323": "Scommaaccent",
        "324": "scommaaccent",
        "325": "uni021A",
        "326": "uni021B",
        "327": "dotlessj",
        "328": "circumflex",
        "329": "caron",
        "330": "breve",
        "331": "dotaccent",
        "332": "ring",
        "333": "ogonek",
        "334": "tilde",
        "335": "hungarumlaut",
        "336": "endash",
        "337": "emdash",
        "338": "quoteleft",
        "339": "quoteright",
        "340": "quotesinglbase",
        "341": "quotedblleft",
        "342": "quotedblright",
        "343": "quotedblbase",
        "344": "dagger",
        "345": "daggerdbl",
        "346": "bullet",
        "347": "ellipsis",
        "348": "perthousand",
        "349": "guilsinglleft",
        "350": "guilsinglright",
        "351": "fraction",
        "352": "Euro",
        "353": "numero",
        "354": "trademark",
        "355": "minus",
        "356": "approxequal",
        "357": "notequal",
        "358": "lessequal",
        "359": "greaterequal",
        "360": "OE.smcp",
        "361": "dotaccent.cap",
        "362": "breve.cap",
        "363": "ogonek.cap",
        "364": "cedilla.cap",
        "365": "ring.cap",
        "366": "tilde.cap",
        "367": "circumflex.cap",
        "368": "at.cap",
        "369": "Abreve.smcp",
        "370": "Amacron.smcp",
        "371": "Aogonek.smcp",
        "372": "AEacute.smcp",
        "373": "Cacute.smcp",
        "374": "Ccaron.smcp",
        "375": "Ccircumflex.smcp",
        "376": "Cdotaccent.smcp",
        "377": "Dcaron.smcp",
        "378": "Dcroat.smcp",
        "379": "Ebreve.smcp",
        "380": "Ecaron.smcp",
        "381": "Edotaccent.smcp",
        "382": "Emacron.smcp",
        "383": "Eng.smcp",
        "384": "Eogonek.smcp",
        "385": "Gbreve.smcp",
        "386": "Gcircumflex.smcp",
        "387": "Gcommaaccent.smcp",
        "388": "Gdotaccent.smcp",
        "389": "Hbar.smcp",
        "390": "Hcircumflex.smcp",
        "391": "Ibreve.smcp",
        "392": "Imacron.smcp",
        "393": "Iogonek.smcp",
        "394": "Itilde.smcp",
        "395": "Jcircumflex.smcp",
        "396": "Kcommaaccent.smcp",
        "397": "Lacute.smcp",
        "398": "Lcaron.smcp",
        "399": "Lcommaaccent.smcp",
        "400": "Ldot.smcp",
        "401": "Nacute.smcp",
        "402": "Ncaron.smcp",
        "403": "Ncommaaccent.smcp",
        "404": "Obreve.smcp",
        "405": "Ohungarumlaut.smcp",
        "406": "Omacron.smcp",
        "407": "Oslashacute.smcp",
        "408": "Racute.smcp",
        "409": "Rcaron.smcp",
        "410": "Rcommaaccent.smcp",
        "411": "Sacute.smcp",
        "412": "Scedilla.smcp",
        "413": "Scircumflex.smcp",
        "414": "Scommaaccent.smcp",
        "415": "Tbar.smcp",
        "416": "Tcaron.smcp",
        "417": "Tcommaaccent.smcp",
        "418": "Ubreve.smcp",
        "419": "Uhungarumlaut.smcp",
        "420": "Umacron.smcp",
        "421": "Uogonek.smcp",
        "422": "Uring.smcp",
        "423": "Utilde.smcp",
        "424": "Wcircumflex.smcp",
        "425": "Ycircumflex.smcp",
        "426": "Zacute.smcp",
        "427": "Zdotaccent.smcp",
        "428": "Idotaccent.smcp",
        "429": "parenleft.cap",
        "430": "parenright.cap",
        "431": "bracketleft.cap",
        "432": "bracketright.cap",
        "433": "braceleft.cap",
        "434": "braceright.cap",
        "435": "exclamdown.cap",
        "436": "questiondown.cap",
        "437": "guillemotleft.cap",
        "438": "guillemotright.cap",
        "439": "guilsinglleft.cap",
        "440": "guilsinglright.cap",
        "441": "hyphen.cap",
        "442": "endash.cap",
        "443": "emdash.cap",
        "444": "periodcentered.cap",
        "445": "acute.cap",
        "446": "caron.cap",
        "447": "dieresis.cap",
        "448": "grave.cap",
        "449": "hungarumlaut.cap",
        "450": "macron.cap",
        "451": "breve.smcp",
        "452": "caron.smcp",
        "453": "circumflex.smcp",
        "454": "dotaccent.smcp",
        "455": "hungarumlaut.smcp",
        "456": "Lslash.smcp",
        "457": "ogonek.smcp",
        "458": "ring.smcp",
        "459": "Scaron.smcp",
        "460": "tilde.smcp",
        "461": "Zcaron.smcp",
        "462": "exclam.smcp",
        "463": "ampersand.smcp",
        "464": "question.smcp",
        "465": "grave.smcp",
        "466": "A.smcp",
        "467": "B.smcp",
        "468": "C.smcp",
        "469": "D.smcp",
        "470": "E.smcp",
        "471": "F.smcp",
        "472": "G.smcp",
        "473": "H.smcp",
        "474": "I.smcp",
        "475": "J.smcp",
        "476": "K.smcp",
        "477": "L.smcp",
        "478": "M.smcp",
        "479": "N.smcp",
        "480": "O.smcp",
        "481": "P.smcp",
        "482": "Q.smcp",
        "483": "R.smcp",
        "484": "S.smcp",
        "485": "T.smcp",
        "486": "U.smcp",
        "487": "V.smcp",
        "488": "W.smcp",
        "489": "X.smcp",
        "490": "Y.smcp",
        "491": "Z.smcp",
        "492": "exclamdown.smcp",
        "493": "dieresis.smcp",
        "494": "macron.smcp",
        "495": "acute.smcp",
        "496": "cedilla.smcp",
        "497": "questiondown.smcp",
        "498": "Agrave.smcp",
        "499": "Aacute.smcp",
        "500": "Acircumflex.smcp",
        "501": "Atilde.smcp",
        "502": "Adieresis.smcp",
        "503": "Aring.smcp",
        "504": "AE.smcp",
        "505": "Ccedilla.smcp",
        "506": "Egrave.smcp",
        "507": "Eacute.smcp",
        "508": "Ecircumflex.smcp",
        "509": "Edieresis.smcp",
        "510": "Igrave.smcp",
        "511": "Iacute.smcp",
        "512": "Icircumflex.smcp",
        "513": "Idieresis.smcp",
        "514": "Eth.smcp",
        "515": "Ntilde.smcp",
        "516": "Ograve.smcp",
        "517": "Oacute.smcp",
        "518": "Ocircumflex.smcp",
        "519": "Otilde.smcp",
        "520": "Odieresis.smcp",
        "521": "Oslash.smcp",
        "522": "Ugrave.smcp",
        "523": "Uacute.smcp",
        "524": "Ucircumflex.smcp",
        "525": "Udieresis.smcp",
        "526": "Yacute.smcp",
        "527": "Thorn.smcp",
        "528": "Ydieresis.smcp",
        "529": "f_f",
        "530": "fi",
        "531": "fl",
        "532": "f_f_i",
        "533": "f_f_l",
        "534": "s_t",
        "535": "zero.lf",
        "536": "one.lf",
        "537": "two.lf",
        "538": "three.lf",
        "539": "four.lf",
        "540": "five.lf",
        "541": "six.lf",
        "542": "seven.lf",
        "543": "eight.lf",
        "544": "nine.lf",
        "545": "a.alt",
        "546": "agrave.alt",
        "547": "aacute.alt",
        "548": "acircumflex.alt",
        "549": "atilde.alt",
        "550": "adieresis.alt",
        "551": "aring.alt",
        "552": "amacron.alt",
        "553": "abreve.alt",
        "554": "aogonek.alt",
        "555": "g.alt",
        "556": "gcircumflex.alt",
        "557": "gbreve.alt",
        "558": "gdotaccent.alt",
        "559": "uni0123.alt",
        "560": "ampersand.alt",
        "561": "slash.cap",
        "562": "backslash.cap",
        "563": "bar.cap",
        "564": "brokenbar.cap",
        "565": "bullet.cap",
        "566": "parenleft.smcp",
        "567": "parenright.smcp",
        "568": "braceleft.smcp",
        "569": "braceright.smcp",
        "570": "bracketleft.smcp",
        "571": "bracketright.smcp",
        "572": "bar.smcp",
        "573": "at.smcp",
        "574": "ampersand.alt.smcp",
        "575": "uni021A.smcp",
        "576": "T_h",
        "577": "c_t",
        "578": "f_f_b",
        "579": "f_f_h",
        "580": "f_f_j",
        "581": "f_f_k",
        "582": "f_f_t",
        "583": "f_b",
        "584": "f_h",
        "585": "f_j",
        "586": "f_k",
        "587": "f_t",
        "588": "t_t"
    }
}

},{}],3:[function(require,module,exports){
/**
 * findAndReplaceDOMText v 0.4.2
 * @author James Padolsey http://james.padolsey.com
 * @license http://unlicense.org/UNLICENSE
 *
 * Matches the text of a DOM node against a regular expression
 * and replaces each match (or node-separated portions of the match)
 * in the specified element.
 */
window.findAndReplaceDOMText = (function() {

	var PORTION_MODE_RETAIN = 'retain';
	var PORTION_MODE_FIRST = 'first';

	var doc = document;
	var toString = {}.toString;

	function isArray(a) {
		return toString.call(a) == '[object Array]';
	}

	function escapeRegExp(s) {
		return String(s).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}

	function exposed() {
		// Try deprecated arg signature first:
		return deprecated.apply(null, arguments) || findAndReplaceDOMText.apply(null, arguments);
	}

	function deprecated(regex, node, replacement, captureGroup, elFilter) {
		if ((node && !node.nodeType) && arguments.length <= 2) {
			return false;
		}
		var isReplacementFunction = typeof replacement == 'function';

		if (isReplacementFunction) {
			replacement = (function(original) {
				return function(portion, match) {
					return original(portion.text, match.startIndex);
				};
			}(replacement));
		}

		// Awkward support for deprecated argument signature (<0.4.0)
		var instance = findAndReplaceDOMText(node, {

			find: regex,

			wrap: isReplacementFunction ? null : replacement,
			replace: isReplacementFunction ? replacement : '$' + (captureGroup || '&'),

			prepMatch: function(m, mi) {

				// Support captureGroup (a deprecated feature)

				if (!m[0]) throw 'findAndReplaceDOMText cannot handle zero-length matches';

				if (captureGroup > 0) {
					var cg = m[captureGroup];
					m.index += m[0].indexOf(cg);
					m[0] = cg;
				}

				m.endIndex = m.index + m[0].length;
				m.startIndex = m.index;
				m.index = mi;

				return m;
			},
			filterElements: elFilter
		});

		exposed.revert = function() {
			return instance.revert();
		};

		return true;
	}

	/**
	 * findAndReplaceDOMText
	 *
	 * Locates matches and replaces with replacementNode
	 *
	 * @param {Node} node Element or Text node to search within
	 * @param {RegExp} options.find The regular expression to match
	 * @param {String|Element} [options.wrap] A NodeName, or a Node to clone
	 * @param {String|Function} [options.replace='$&'] What to replace each match with
	 * @param {Function} [options.filterElements] A Function to be called to check whether to
	 *	process an element. (returning true = process element,
	 *	returning false = avoid element)
	 */
	function findAndReplaceDOMText(node, options) {
		return new Finder(node, options);
	}

	exposed.Finder = Finder;

	/**
	 * Finder -- encapsulates logic to find and replace.
	 */
	function Finder(node, options) {

		options.portionMode = options.portionMode || PORTION_MODE_RETAIN;

		this.node = node;
		this.options = options;

		// ENable match-preparation method to be passed as option:
		this.prepMatch = options.prepMatch || this.prepMatch;

		this.reverts = [];

		this.matches = this.search();

		if (this.matches.length) {
			this.processMatches();
		}

	}

	Finder.prototype = {

		/**
		 * Searches for all matches that comply with the instance's 'match' option
		 */
		search: function() {

			var match;
			var matchIndex = 0;
			var regex = this.options.find;
			var text = this.getAggregateText();
			var matches = [];

			regex = typeof regex === 'string' ? RegExp(escapeRegExp(regex), 'g') : regex;

			if (regex.global) {
				while (match = regex.exec(text)) {
					matches.push(this.prepMatch(match, matchIndex++));
				}
			} else {
				if (match = text.match(regex)) {
					matches.push(this.prepMatch(match, 0));
				}
			}

			return matches;

		},

		/**
		 * Prepares a single match with useful meta info:
		 */
		prepMatch: function(match, matchIndex) {

			if (!match[0]) {
				throw new Error('findAndReplaceDOMText cannot handle zero-length matches');
			}

			match.endIndex = match.index + match[0].length;
			match.startIndex = match.index;
			match.index = matchIndex;

			return match;
		},

		/**
		 * Gets aggregate text within subject node
		 */
		getAggregateText: function() {

			var elementFilter = this.options.filterElements;

			return getText(this.node);

			/**
			 * Gets aggregate text of a node without resorting
			 * to broken innerText/textContent
			 */
			function getText(node) {

				if (node.nodeType === 3) {
					return node.data;
				}

				if (elementFilter && !elementFilter(node)) {
					return '';
				}

				var txt = '';

				if (node = node.firstChild) do {
					txt += getText(node);
				} while (node = node.nextSibling);

				return txt;

			}

		},

		/**
		 * Steps through the target node, looking for matches, and
		 * calling replaceFn when a match is found.
		 */
		processMatches: function() {

			var matches = this.matches;
			var node = this.node;
			var elementFilter = this.options.filterElements;

			var startPortion,
				endPortion,
				innerPortions = [],
				curNode = node,
				match = matches.shift(),
				atIndex = 0, // i.e. nodeAtIndex
				matchIndex = 0,
				portionIndex = 0,
				doAvoidNode,
				nodeStack = [node];

			out: while (true) {

				if (curNode.nodeType === 3) {

					if (!endPortion && curNode.length + atIndex >= match.endIndex) {

						// We've found the ending
						endPortion = {
							node: curNode,
							index: portionIndex++,
							text: curNode.data.substring(match.startIndex - atIndex, match.endIndex - atIndex),
							indexInMatch: atIndex - match.startIndex,
							indexInNode: match.startIndex - atIndex, // always zero for end-portions
							endIndexInNode: match.endIndex - atIndex,
							isEnd: true
						};

					} else if (startPortion) {
						// Intersecting node
						innerPortions.push({
							node: curNode,
							index: portionIndex++,
							text: curNode.data,
							indexInMatch: atIndex - match.startIndex,
							indexInNode: 0 // always zero for inner-portions
						});
					}

					if (!startPortion && curNode.length + atIndex > match.startIndex) {
						// We've found the match start
						startPortion = {
							node: curNode,
							index: portionIndex++,
							indexInMatch: 0,
							indexInNode: match.startIndex - atIndex,
							endIndexInNode: match.endIndex - atIndex,
							text: curNode.data.substring(match.startIndex - atIndex, match.endIndex - atIndex)
						};
					}

					atIndex += curNode.data.length;

				}

				doAvoidNode = curNode.nodeType === 1 && elementFilter && !elementFilter(curNode);

				if (startPortion && endPortion) {

					curNode = this.replaceMatch(match, startPortion, innerPortions, endPortion);

					// processMatches has to return the node that replaced the endNode
					// and then we step back so we can continue from the end of the
					// match:

					atIndex -= (endPortion.node.data.length - endPortion.endIndexInNode);

					startPortion = null;
					endPortion = null;
					innerPortions = [];
					match = matches.shift();
					portionIndex = 0;
					matchIndex++;

					if (!match) {
						break; // no more matches
					}

				} else if (
					!doAvoidNode &&
					(curNode.firstChild || curNode.nextSibling)
				) {
					// Move down or forward:
					if (curNode.firstChild) {
						nodeStack.push(curNode);
						curNode = curNode.firstChild;
					} else {
						curNode = curNode.nextSibling;
					}
					continue;
				}

				// Move forward or up:
				while (true) {
					if (curNode.nextSibling) {
						curNode = curNode.nextSibling;
						break;
					}
					curNode = nodeStack.pop();
					if (curNode === node) {
						break out;
					}
				}

			}

		},

		/**
		 * Reverts ... TODO
		 */
		revert: function() {
			// Reversion occurs backwards so as to avoid nodes subsequently
			// replaced during the matching phase (a forward process):
			for (var l = this.reverts.length; l--;) {
				this.reverts[l]();
			}
			this.reverts = [];
		},

		prepareReplacementString: function(string, portion, match, matchIndex) {
			var portionMode = this.options.portionMode;
			if (
				portionMode === PORTION_MODE_FIRST &&
				portion.indexInMatch > 0
			) {
				return '';
			}
			string = string.replace(/\$(\d+|&|`|')/g, function($0, t) {
				var replacement;
				switch(t) {
					case '&':
						replacement = match[0];
						break;
					case '`':
						replacement = match.input.substring(0, match.startIndex);
						break;
					case '\'':
						replacement = match.input.substring(match.endIndex);
						break;
					default:
						replacement = match[+t];
				}
				return replacement;
			});

			if (portionMode === PORTION_MODE_FIRST) {
				return string;
			}

			if (portion.isEnd) {
				return string.substring(portion.indexInMatch);
			}

			return string.substring(portion.indexInMatch, portion.indexInMatch + portion.text.length);
		},

		getPortionReplacementNode: function(portion, match, matchIndex) {

			var replacement = this.options.replace || '$&';
			var wrapper = this.options.wrap;

			if (wrapper && wrapper.nodeType) {
				// Wrapper has been provided as a stencil-node for us to clone:
				var clone = doc.createElement('div');
				clone.innerHTML = wrapper.outerHTML || new XMLSerializer().serializeToString(wrapper);
				wrapper = clone.firstChild;
			}

			if (typeof replacement == 'function') {
				replacement = replacement(portion, match, matchIndex);
				if (replacement && replacement.nodeType) {
					return replacement;
				}
				return doc.createTextNode(String(replacement));
			}

			var el = typeof wrapper == 'string' ? doc.createElement(wrapper) : wrapper;

			replacement = doc.createTextNode(
				this.prepareReplacementString(
					replacement, portion, match, matchIndex
				)
			);

			if (!replacement.data) {
				return replacement;
			}

			if (!el) {
				return replacement;
			}

			el.appendChild(replacement);

			return el;
		},

		replaceMatch: function(match, startPortion, innerPortions, endPortion) {

			var matchStartNode = startPortion.node;
			var matchEndNode = endPortion.node;

			var preceedingTextNode;
			var followingTextNode;

			if (matchStartNode === matchEndNode) {

				var node = matchStartNode;

				if (startPortion.indexInNode > 0) {
					// Add `before` text node (before the match)
					preceedingTextNode = doc.createTextNode(node.data.substring(0, startPortion.indexInNode));
					node.parentNode.insertBefore(preceedingTextNode, node);
				}

				// Create the replacement node:
				var newNode = this.getPortionReplacementNode(
					endPortion,
					match
				);

				node.parentNode.insertBefore(newNode, node);

				if (endPortion.endIndexInNode < node.length) { // ?????
					// Add `after` text node (after the match)
					followingTextNode = doc.createTextNode(node.data.substring(endPortion.endIndexInNode));
					node.parentNode.insertBefore(followingTextNode, node);
				}

				node.parentNode.removeChild(node);

				this.reverts.push(function() {
					if (preceedingTextNode === newNode.previousSibling) {
						preceedingTextNode.parentNode.removeChild(preceedingTextNode);
					}
					if (followingTextNode === newNode.nextSibling) {
						followingTextNode.parentNode.removeChild(followingTextNode);
					}
					newNode.parentNode.replaceChild(node, newNode);
				});

				return newNode;

			} else {
				// Replace matchStartNode -> [innerMatchNodes...] -> matchEndNode (in that order)


				preceedingTextNode = doc.createTextNode(
					matchStartNode.data.substring(0, startPortion.indexInNode)
				);

				followingTextNode = doc.createTextNode(
					matchEndNode.data.substring(endPortion.endIndexInNode)
				);

				var firstNode = this.getPortionReplacementNode(
					startPortion,
					match
				);

				var innerNodes = [];

				for (var i = 0, l = innerPortions.length; i < l; ++i) {
					var portion = innerPortions[i];
					var innerNode = this.getPortionReplacementNode(
						portion,
						match
					);
					portion.node.parentNode.replaceChild(innerNode, portion.node);
					this.reverts.push((function(portion, innerNode) {
						return function() {
							innerNode.parentNode.replaceChild(portion.node, innerNode);
						};
					}(portion, innerNode)));
					innerNodes.push(innerNode);
				}

				var lastNode = this.getPortionReplacementNode(
					endPortion,
					match
				);

				matchStartNode.parentNode.insertBefore(preceedingTextNode, matchStartNode);
				matchStartNode.parentNode.insertBefore(firstNode, matchStartNode);
				matchStartNode.parentNode.removeChild(matchStartNode);

				matchEndNode.parentNode.insertBefore(lastNode, matchEndNode);
				matchEndNode.parentNode.insertBefore(followingTextNode, matchEndNode);
				matchEndNode.parentNode.removeChild(matchEndNode);

				this.reverts.push(function() {
					preceedingTextNode.parentNode.removeChild(preceedingTextNode);
					firstNode.parentNode.replaceChild(matchStartNode, firstNode);
					followingTextNode.parentNode.removeChild(followingTextNode);
					lastNode.parentNode.replaceChild(matchEndNode, lastNode);
				});

				return lastNode;
			}
		}

	};

	return exposed;

}());

},{}]},{},[1]);
